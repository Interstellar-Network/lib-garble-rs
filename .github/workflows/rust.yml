name: Build and Test

on:
  push:

jobs:
  # TODO split test and lint; but that REQUIRE caching else recompile from scratch in between
  rust:
    runs-on: ubuntu-latest
    steps:
      # install build dependencies
      # MUST match the same step in Dockerfile
      # - name: Install dependencies
      #   run: sudo apt-get update && sudo apt-get install -y libboost-dev

      - uses: Interstellar-Network/gh-actions/prepare@v2
        with:
          ssh_key_input: ${{ secrets.SSH_KEY_MACHINE_USER_INTERSTELLAR_CI }}
          install_cmake_and_ninja: false

      - uses: Interstellar-Network/gh-actions/prepare_rust@v2
        with:
          toolchain_toolchain: stable
      # for now https://github.com/actions-rs/toolchain only support one "target"...
      # TODO? "x86_64-unknown-linux-gnu"
      - run: rustup target add armv7-linux-androideabi aarch64-linux-android

      - uses: Interstellar-Network/gh-actions/rust-lint@v2

      ##########################################################################
      # NOTE "protoc-VERSION-HOST.zip"(contains protoc itself)
      # and "protobuf-cpp-VERSION.tar.gz" contains the source code for eg "src/google/protobuf/port_def.inc"
      # What we download in CI, and what shared/rust/circuit_evaluate/build.rs expects SHOULD MATCH!
      # DO NOT change the structure, else build.rs will fail!
      #
      # Needed for at least libp2p
      - name: Install protoc custom prebuilt binary
        run: |
          mkdir /home/runner/protoc
          cd /home/runner/protoc
          wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip -O prebuilt.zip
          unzip prebuilt.zip
          rm prebuilt.zip
          echo "PROTOC=/home/runner/protoc/bin/protoc" >> $GITHUB_ENV
        shell: bash

      ##########################################################################
      # cf https://github.com/android-actions/setup-android

      # TODO apparently this is not cached?
      # if not: cache the whole "Setup Android SDK"+"Delete old NDK v23"+"Install NDK v24"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # else: "Warning: Observed package id 'ndk;23.2.8568313' in inconsistent location '/usr/local/lib/android/sdk/ndk-bundle' (Expected '/usr/local/lib/android/sdk/ndk/23.2.8568313')"
      - name: Delete old NDK v23
        # version required else: "Warning: Failed to find package 'ndk'"
        run: sdkmanager --uninstall "ndk;23.2.8568313"
      - name: Install NDK v25
        # version required else: "Warning: Failed to find package 'ndk'"
        # MUST match version used at NDK_ROOT below! Careful when updating!
        run: sdkmanager "ndk;25.1.8937393"

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/install-go-ipfs@v2

      ##########################################################################

      - uses: Interstellar-Network/gh-actions/rust-build-and-test@v2
        with:
          # For now we the benches just output to stdout and we do nothing with it
          # TODO performance regression testing
          check_args: --profile=bench
          test_args: --profile=bench

      ##########################################################################
      # compile for android
      # NOTE: we only care about compilation for this; not running the test
      # cf https://github.com/Interstellar-Network/wallet-app/blob/master/shared/build.gradle.kts
      # For how/which variables are used

      # NOTE: AR is NOT is the same PATH as CC/CXX
      - name: setup env vars for Rust Android build aarch64-linux-android
        # NDK_ROOT MUST match version installed above
        # cf https://github.com/android-actions/setup-android/blob/main/src/main.ts#L184
        # to see what env var are available
        run: |
          export NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.1.8937393
          echo NDK_ROOT=$NDK_ROOT
          ls -al $NDK_ROOT/..
          echo "CC_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang" >> $GITHUB_ENV
          echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=21" >> $GITHUB_ENV
        shell: bash

      - name: Compile Android aarch64-linux-android
        run: |
          cargo build --verbose --target=aarch64-linux-android
        shell: bash

      # NOTE: AR is NOT is the same PATH as CC/CXX
      - name: setup env vars for Rust Android build armv7-linux-androideabi
        # NDK_ROOT MUST match version installed above
        # cf https://github.com/android-actions/setup-android/blob/main/src/main.ts#L184
        # to see what env var are available
        run: |
          export NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.1.8937393
          echo NDK_ROOT=$NDK_ROOT
          ls -al $NDK_ROOT/..
          echo "CC_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang" >> $GITHUB_ENV
          echo "CXX_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang++" >> $GITHUB_ENV
          echo "AR_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
          echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang" >> $GITHUB_ENV
          echo "ANDROID_ABI=armeabi-v7a" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=21" >> $GITHUB_ENV
        shell: bash

      - name: Compile Android armv7-linux-androideabi
        id: build-armv7-linux-androideabi
        run: |
          cargo build --verbose --target=armv7-linux-androideabi
        shell: bash
        # TODO it fails b/c of pointer size difference, at least in Scuttlebut
        # but as we are still not in PROD/GA, we only care about aarch64 for now
        continue-on-error: true

      ##########################################################################

      # TODO move into separate action? ideally into a JS action "post" that setup ccache?
      # NOTE: remove if using "rust-build-and-test"
      - name: Print ccache/sccache stats
        # display stats even if tests failed
        if: always()
        run: |
          ccache --show-stats || true
          sccache --show-stats || true
        shell: bash
